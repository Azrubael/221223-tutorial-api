2022-12-24
>>>>>>>067 Обработка ошибок.mp4
********************************
Создаем './src/errors/exception-filters.ts'

PS E:\IT\[JS]-code\221129-demo\045-083api> npm run build
	> tutorial-api-nodejs@1.0.0 build
	> tsc
PS E:\IT\[JS]-code\221129-demo\045-083api> npm start    
	> tutorial-api-nodejs@1.0.0 start
	2022-12-24 10:39:22.649  INFO [post /login]
	Сервер запущен на http://localhost:9001
	2022-12-24 10:39:30.454  ERROR [login error]
	Ошибка 401 : Ошибка авторизации при выполнении UserController.login()
	Завершить выполнение пакетного файла [Y(да)/N(нет)]? н
	Завершить выполнение пакетного файла [Y(да)/N(нет)]? y
PS E:\IT\[JS]-code\221129-demo\045-083api> git add .
PS E:\IT\[JS]-code\221129-demo\045-083api> git commit -m "Lesson #067. Errod handlers added and checked"

2022-12-24
>>>>>>>068 Разбор DI и IOC.mp4
********************************
DI = [ dependency injection ] это предоставление внешней зависимости какому-то своему программному компоненту. Это можно делать через класс или через метод (для однократного использования).
IOC = [ inversion of control ] это принцип, при котором каждый компонент должен быть как можно более изолирован от других, не полагаясь в своей работе на детали конкретной реализации других компонентов.
DIP = [ dependency inversion principle ] это принцип, при котором модули верхних уровней не должны напрямую импортировать сущности из модулей нижних уровней. Оба типа модулей должны зависеть от абстракций. Абстракции не должны зависеть от деталей, а детали должны зависеть от абстракций.
Composition Root - точка сбора всех зависимостей

Создаем './src/logger/logger-interface.ts'
путем 'dependency injection' можно подменить например LoggerService каким-то другим классом, который удовлетворяет тому же интерфейсу. Это может делаться например с целью тестирования.

2022-12-24 13:20
>>>>>>>069 Декораторы.mp4
********************************
Декораторы и интерфейсы - инструменты TypeScript, в JavaScript их нет
Декораторы JS отличаются от TS и находяться на 2й стадии предложения (внедряются)
Декораторы позволяют добавить синтаксис для аннотаций и для метапрограммирования в TS. Декораторы позволяют работать с классами, свойствами, методами и параметрами методов.
Порядок исползования декораторов - сверху вниз.
По сути декоратор - оборачивающая функция для добавления логики. Как правило используются декораторы из готовых бибоиотек.

	$ git branch fork-069
	$ git log --oneline --decorate --graph --all
	$ git 


