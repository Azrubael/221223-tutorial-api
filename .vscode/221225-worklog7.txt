2022-12-25  17:15
>>>>>>>>>074 Подключение nodemon.mp4
***************************************
'nodemon' - мониторит соответствующие файлы и при их изменениях перезапускает сервер
'ts-node' - среда окружения для исполнения тайпскрипт на ноде, он тоже компилирует TypeScript в JavaScript для исполнения его на V8.
	$ npm install -D nodemon ts-node
в 'nest.js' встроен всой аналог, запускающий watch файлов

2022-12-25 17:40
>>>>>>>>075 Отладка.mp4
***************************************
F5
что-то не так


2022-12-25 18:21
>>>>>>>>>078 Улучшение архитектуры.mp4
***************************************

2022-12-25 18:28
>>>>>>>>079 Data transfer object.mp4
***************************************
Добавляем data transfer objects [classes dto, т.к. на них будут добавляться декораторы] для того, чтобы использовать их в методах login и register.
Это по сути - описание того, что должно приходить извне и затем попадать в наш контроллер.
Создаем классы './src/users/dto/user-login-dto.ts' и './src/users/dto/user-login-dto.ts'.
Устанавливаем парсер (хотя в "express": "^4.18.2" тоже есть такие возможности).
	$ npm install body-parser
Соответственно изменены типы параметров res для функций login и register в файле './src/users/users-controller.ts'
Добавлена функция 'useMiddleware()' в 'app.ts'.
	$ git add .
	$ git commit -m "Lesson #079. Data transfer objects (two new classes). Also changed types of parameters 'res' in 'users-controller.ts' ans 
added useMiddleware in 'app.ts'"

2022-12-25
>>>>>>>>>080 User entity.mp4
***************************************
User entity - чистые части кода, которые содержат бизнес-логику и никак не зависят от реализации кода. это классы - бизнес-единицы.
Создаем класс User в './src/users/user-entity.ts'
Хеширование пароля будет с помощью библиотеки 'bcryptjs'
	$ npm install bcryptjs
	$ npm install -D @types/bcryptjs

~~~~~~~~~~~~~~~~~~~~~~~~
import { hash } from 'bcryptjs'
export class User {
	private _password: string
	constructor(private readonly _email: string,
		private readonly _name: string) { console.log('') }
	get email(): string {
		return this._email
	}
	get name(): string {
		return this._name
	}
	get password(): string {
		return this._password
	}
	public async setPassword(pass: string, salt: number): Promise<void> {
		this._password = await hash(pass, salt)
	}
}
~~~~~~~~~~~~~~~~~~~~~~~~
